title:: Sample
summary:: sample
categories:: transnd>lib

CLASSMETHODS::
private:: new

METHOD:: celesta

INSTANCEMETHODS::
private:: load, associate, nrtMsg, map, free

EXAMPLES::
code::

MIDIIn.connectAll;
s.boot;
x = Sample.celesta;

// midi
(
~nodes = Array.newClear(128);
SynthDef(\simplay, { |gate=1, buf, rate, amp=1|
	var sig, env;
	sig = PlayBuf.ar(1, buf, rate, 1, 1000);
	env = Env.adsr.kr(2, gate);
    sig = sig * amp * env;
	sig = Pan2.ar(sig, Rand(-0.5, 0.5));
    Out.ar(0, sig);
}).add;
MIDIFunc.noteOn {|v,n|
    var m = x.map[n];
    ~nodes[n] = Synth(\simplay, [buf:m[0], rate:m[1], amp: v.linlin(0,127,-24,-6).dbamp]);
};
MIDIFunc.noteOff {|v,n|~nodes[n].release };
)
// granular
(
~nodes = Array.newClear(128);
SynthDef(\samplay, { |gate=1, buf, rate, amp=1|
    var sig, env, trig, gRate, pos, dur, pan, ipl;
	trig = Impulse.kr(30) + Dust.kr(30);
    gRate = BufRateScale.ir(buf)*rate;
	pos = 0.2 + TRand.kr(-0.01, 0.01, trig);
    dur = 0.07;
	pan = Rand(-0.7, 0.7) + TRand.kr(-0.1, 0.1, trig);
    ipl = 4;
    sig = TGrains.ar(2, trig, buf, gRate, pos, dur, pan, 1, ipl);
	env = Env.adsr(3, 2, 0.5, 3).kr(2, gate);
    sig = sig * amp * env;
    Out.ar(0, sig);
}).add;
MIDIFunc.noteOn {|v,n|
    var m = x.map[n];
    ~nodes[n] = Synth(\samplay, [buf:m[0], rate:m[1], amp: v.linlin(0,127,-12,-0).dbamp]);
};
MIDIFunc.noteOff {|v,n|~nodes[n].release };
)

// free
x.free;
::